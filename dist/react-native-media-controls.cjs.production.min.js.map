{"version":3,"file":"react-native-media-controls.cjs.production.min.js","sources":["../src/MediaControls.style.ts","../src/constants/playerStates.ts","../src/utils.ts","../src/Controls.tsx","../src/Slider.tsx","../src/MediaControls.tsx","../src/Toolbar.tsx"],"sourcesContent":["import { StyleSheet } from \"react-native\";\n\nconst containerBackgroundColor = \"rgba(45, 59, 62, 0.4)\";\nconst playButtonBorderColor = \"rgba(255,255,255,0.5)\";\nconst white = \"#fff\";\n\nexport default StyleSheet.create({\n  container: {\n    alignItems: \"center\",\n    bottom: 0,\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n    left: 0,\n    paddingHorizontal: 20,\n    paddingVertical: 13,\n    position: \"absolute\",\n    right: 0,\n    top: 0,\n  },\n  controlsRow: {\n    alignItems: \"center\",\n    alignSelf: \"stretch\",\n    flex: 1,\n    justifyContent: \"center\",\n  },\n  fullScreenContainer: {\n    alignItems: \"center\",\n    alignSelf: \"stretch\",\n    justifyContent: \"center\",\n    paddingLeft: 20,\n  },\n  playButton: {\n    alignItems: \"center\",\n    borderColor: playButtonBorderColor,\n    borderRadius: 3,\n    borderWidth: 1.5,\n    height: 50,\n    justifyContent: \"center\",\n    width: 50,\n  },\n  playIcon: {\n    height: 22,\n    resizeMode: \"contain\",\n    width: 22,\n  },\n  progressColumnContainer: {\n    flex: 1,\n  },\n  progressContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\",\n    marginBottom: -25,\n  },\n  progressSlider: {\n    alignSelf: \"stretch\",\n  },\n  replayIcon: {\n    height: 20,\n    resizeMode: \"stretch\",\n    width: 25,\n  },\n  thumb: {\n    backgroundColor: white,\n    borderRadius: 50,\n    borderWidth: 3,\n    height: 20,\n    width: 20,\n  },\n  timeRow: {\n    alignSelf: \"stretch\",\n  },\n  timerLabel: {\n    color: white,\n    fontSize: 12,\n  },\n  timerLabelsContainer: {\n    alignSelf: \"stretch\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    marginBottom: -7,\n  },\n  toolbar: {\n    flexDirection: \"row\",\n    flex: 1,\n    justifyContent: \"flex-end\",\n  },\n  toolbarRow: {\n    alignItems: \"flex-start\",\n    flexDirection: \"row\",\n    justifyContent: \"flex-start\",\n  },\n  track: {\n    borderRadius: 1,\n    height: 5,\n  },\n  // **Added Styles**\n  controlsOverlay: {\n    ...StyleSheet.absoluteFillObject,\n    justifyContent: \"space-between\",\n    backgroundColor: containerBackgroundColor,\n    padding: 10,\n  },\n  touchableArea: {\n    ...StyleSheet.absoluteFillObject,\n  },\n});\n","enum PLAYER_STATES {\n  PLAYING = 0,\n  PAUSED = 1,\n  ENDED = 2,\n}\n\nexport { PLAYER_STATES };\n","import { PLAYER_STATES } from \"./constants/playerStates\";\n\nexport const humanizeVideoDuration = (seconds: number) => {\n  const [begin, end] = seconds >= 3600 ? [11, 8] : [14, 5];\n  const date = new Date(0);\n\n  date.setSeconds(seconds);\n  return date.toISOString().substr(begin, end);\n};\n\nexport const noop = () => {};\n\nexport const getPlayerStateIcon = (playerState: PLAYER_STATES) => {\n  switch (playerState) {\n    case PLAYER_STATES.PAUSED:\n      return require(\"./assets/ic_play.png\");\n    case PLAYER_STATES.PLAYING:\n      return require(\"./assets/ic_pause.png\");\n    case PLAYER_STATES.ENDED:\n      return require(\"./assets/ic_replay.png\");\n    default:\n      return null;\n  }\n};\n","import React from \"react\";\nimport { TouchableOpacity, View, ActivityIndicator, Image } from \"react-native\";\nimport styles from \"./MediaControls.style\";\nimport { getPlayerStateIcon } from \"./utils\";\nimport { Props } from \"./MediaControls\";\nimport { PLAYER_STATES } from \"./constants/playerStates\";\n\ntype ControlsProps = Pick<\n  Props,\n  \"isLoading\" | \"mainColor\" | \"playerState\" | \"onReplay\"\n> & {\n  onPause: () => void;\n};\n\nconst Controls = (props: ControlsProps) => {\n  const { isLoading, mainColor, playerState, onReplay, onPause } = props;\n  const icon = getPlayerStateIcon(playerState);\n  const pressAction = playerState === PLAYER_STATES.ENDED ? onReplay : onPause;\n\n  const content = isLoading ? (\n    <ActivityIndicator size=\"large\" color=\"#FFF\" />\n  ) : (\n    <TouchableOpacity\n      style={[styles.playButton, { backgroundColor: mainColor }]}\n      onPress={pressAction}\n      accessibilityLabel={PLAYER_STATES.PAUSED ? \"Tap to Play\" : \"Tap to Pause\"}\n      accessibilityHint={\"Plays and Pauses the Video\"}\n    >\n      <Image source={icon} style={styles.playIcon} />\n    </TouchableOpacity>\n  );\n\n  return <View style={[styles.controlsRow]}>{content}</View>;\n};\n\nexport { Controls };\n","import React from \"react\";\nimport {\n  TouchableOpacity,\n  View,\n  Text,\n  Image,\n  ViewStyle,\n  Platform,\n} from \"react-native\";\nimport styles from \"./MediaControls.style\";\nimport { humanizeVideoDuration } from \"./utils\";\nimport { Props as MediaControlsProps } from \"./MediaControls\";\nimport RNSlider from \"@react-native-community/slider\";\n\nexport type CustomSliderStyle = {\n  containerStyle: ViewStyle;\n  trackStyle: ViewStyle;\n  thumbStyle: ViewStyle;\n};\n\ntype Props = Pick<\n  MediaControlsProps,\n  | \"progress\"\n  | \"duration\"\n  | \"mainColor\"\n  | \"onFullScreen\"\n  | \"playerState\"\n  | \"onSeek\"\n  | \"onSeeking\"\n> & {\n  onPause: () => void;\n  customSliderStyle?: CustomSliderStyle;\n  hideSeekbar?: boolean;\n};\n\nconst fullScreenImage = require(\"./assets/ic_fullscreen.png\");\nconst thumb = require(\"./assets/ic_thumb.png\");\n\nconst Slider = (props: Props) => {\n  const {\n    customSliderStyle,\n    duration,\n    mainColor,\n    onFullScreen,\n    onPause,\n    progress,\n    hideSeekbar,\n  } = props;\n\n  const containerStyle = customSliderStyle?.containerStyle || {};\n\n\n  const seekVideo = (value: number) => {\n    props.onSeek(value);\n    onPause();\n  };\n\n  return (\n    <View\n      style={[styles.controlsRow, styles.progressContainer, containerStyle]}\n    >\n      <View style={styles.progressColumnContainer}>\n        {!hideSeekbar && (\n          <View style={[styles.timerLabelsContainer]}>\n            <Text style={styles.timerLabel}>\n              {humanizeVideoDuration(progress)}\n            </Text>\n            <Text style={styles.timerLabel}>\n              {humanizeVideoDuration(duration)}\n            </Text>\n          </View>\n        )}\n        {!hideSeekbar && (\n          <RNSlider\n            style={[\n              styles.progressSlider,\n              { marginTop: Platform.OS == \"ios\" ? 4 : 12, marginBottom: Platform.OS == \"ios\" ? 0 : 6 },\n            ]}\n            onSlidingComplete={seekVideo}\n            maximumValue={Math.floor(duration)}\n            thumbImage={thumb}\n            value={Math.floor(progress)}\n            minimumTrackTintColor={mainColor}\n            maximumTrackTintColor={\"#AEB3B7\"}\n          />\n        )}\n      </View>\n      {Boolean(onFullScreen) && (\n        <TouchableOpacity\n          style={styles.fullScreenContainer}\n          onPress={onFullScreen}\n        >\n          <Image source={fullScreenImage} />\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n};\n\nexport { Slider };\n","import React, { useEffect, useCallback, useState } from \"react\";\nimport {\n  View,\n  GestureResponderEvent,\n  ViewStyle,\n  TouchableWithoutFeedback,\n} from \"react-native\";\nimport Animated, {\n  useSharedValue,\n  useAnimatedStyle,\n  withTiming,\n  withDelay,\n  runOnJS,\n} from \"react-native-reanimated\";\nimport styles from \"./MediaControls.style\";\nimport { PLAYER_STATES } from \"./constants/playerStates\";\nimport { Controls } from \"./Controls\";\nimport { Slider, CustomSliderStyle } from \"./Slider\";\nimport { Toolbar } from \"./Toolbar\";\n\n// Define Props as per your original definition\nexport type Props = {\n  children: React.ReactNode;\n  containerStyle?: ViewStyle;\n  duration: number;\n  fadeOutDelay?: number;\n  isFullScreen: boolean;\n  isLoading: boolean;\n  mainColor: string;\n  onFullScreen?: (event: GestureResponderEvent) => void;\n  onPaused: (playerState: PLAYER_STATES) => void;\n  onReplay: () => void;\n  onSeek: (value: number) => void;\n  onSeeking: (value: number) => void;\n  playerState: PLAYER_STATES;\n  progress: number;\n  showOnStart?: boolean;\n  showOnLoad?: boolean;\n  sliderStyle?: CustomSliderStyle;\n  toolbarStyle?: ViewStyle;\n  hideSeekbar?: boolean;\n};\n\n// Extend React.FC<Props> to include Toolbar\ninterface MediaControlsComponent extends React.FC<Props> {\n  Toolbar: typeof Toolbar;\n}\n\nconst MediaControls: MediaControlsComponent = props => {\n  const {\n    children,\n    containerStyle = {},\n    duration,\n    fadeOutDelay = 5000,\n    isLoading = false,\n    mainColor = \"rgba(12, 83, 175, 0.9)\",\n    onFullScreen,\n    onReplay: onReplayCallback,\n    onSeek,\n    onSeeking,\n    playerState,\n    progress,\n    showOnStart = true,\n    showOnLoad = false,\n    sliderStyle,\n    hideSeekbar = false,\n    toolbarStyle = {},\n  } = props;\n\n  // Determine initial opacity based on showOnStart\n  const initialOpacity = showOnStart ? 1 : 0;\n  const opacity = useSharedValue(initialOpacity);\n  const [isVisible, setIsVisible] = useState(showOnStart);\n\n  // Fade out controls after a delay\n  const fadeOutControls = useCallback(\n    (delay = 0) => {\n      opacity.value = withDelay(\n        delay,\n        withTiming(\n          0,\n          {\n            duration: 300,\n          },\n          (finished: boolean) => {\n            if (finished) {\n              runOnJS(setIsVisible)(false);\n            }\n          },\n        ),\n      );\n    },\n    [opacity],\n  );\n\n  // Fade in controls and optionally loop fade out\n  const fadeInControls = useCallback(\n    (loop = true) => {\n      runOnJS(setIsVisible)(true);\n      opacity.value = withTiming(\n        1,\n        {\n          duration: 300,\n        },\n        () => {\n          if (loop) {\n            runOnJS(fadeOutControls)(fadeOutDelay);\n          }\n        },\n      );\n    },\n    [opacity, fadeOutControls, fadeOutDelay],\n  );\n\n  // Toggle controls visibility\n  const toggleControls = useCallback(() => {\n    const currentOpacity = opacity.value;\n    if (currentOpacity > 0.5) {\n      fadeOutControls();\n    } else {\n      fadeInControls();\n    }\n  }, [opacity, fadeOutControls, fadeInControls]);\n\n  // Handle showOnLoad prop changes\n  useEffect(() => {\n    if (showOnLoad) {\n      if (isLoading) fadeInControls();\n      else fadeOutControls();\n    }\n  }, [isLoading, showOnLoad]);\n\n  // Replay button handler\n  const onReplay = useCallback(() => {\n    fadeOutControls(fadeOutDelay);\n    onReplayCallback();\n  }, [fadeOutControls, fadeOutDelay, onReplayCallback]);\n\n  // Cancel any ongoing animations and make controls fully visible\n  const cancelAnimation = useCallback(() => {\n    opacity.value = withTiming(1, { duration: 0 });\n    runOnJS(setIsVisible)(true);\n  }, [opacity]);\n\n  // Pause/play button handler\n  const onPause = useCallback(() => {\n    const { PLAYING, PAUSED, ENDED } = PLAYER_STATES;\n    switch (playerState) {\n      case PLAYING: {\n        cancelAnimation();\n        break;\n      }\n      case PAUSED: {\n        fadeOutControls(fadeOutDelay);\n        break;\n      }\n      case ENDED:\n        break;\n    }\n\n    const newPlayerState = playerState === PLAYING ? PAUSED : PLAYING;\n    props.onPaused(newPlayerState);\n  }, [playerState, props, cancelAnimation, fadeOutControls, fadeOutDelay]);\n\n  // Animated style for controls opacity\n  const animatedStyle = useAnimatedStyle(() => ({\n    opacity: opacity.value,\n  }));\n\n  return (\n    <View style={[styles.container, containerStyle, { flex: 1 }]}>\n      {/* Touchable layer always active */}\n      <TouchableWithoutFeedback onPress={toggleControls}>\n        <View style={styles.touchableArea} />\n      </TouchableWithoutFeedback>\n\n      {/* Controls overlay */}\n      {isVisible && (\n        <TouchableWithoutFeedback onPress={toggleControls}>\n          {/* @ts-ignore: Suppressing TS2322 error */}\n          <Animated.View style={[animatedStyle, styles.controlsOverlay]}>\n            <View style={[styles.controlsRow, styles.toolbarRow, toolbarStyle]}>\n              {children}\n            </View>\n            <Controls\n              onPause={onPause}\n              onReplay={onReplay}\n              isLoading={isLoading}\n              mainColor={mainColor}\n              playerState={playerState}\n            />\n            <Slider\n              progress={progress}\n              duration={duration}\n              mainColor={mainColor}\n              onFullScreen={onFullScreen}\n              playerState={playerState}\n              onSeek={onSeek}\n              onSeeking={onSeeking}\n              onPause={onPause}\n              customSliderStyle={sliderStyle}\n              hideSeekbar={hideSeekbar}\n            />\n          </Animated.View>\n        </TouchableWithoutFeedback>\n      )}\n    </View>\n  );\n};\n\n// Attach Toolbar to MediaControls\nMediaControls.Toolbar = Toolbar;\n\nexport default MediaControls;\n","import React from \"react\";\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst Toolbar = ({ children }: Props) => <>{children}</>;\n\nexport { Toolbar };\n"],"names":["PLAYER_STATES","StyleSheet","create","container","alignItems","bottom","flexDirection","justifyContent","left","paddingHorizontal","paddingVertical","position","right","top","controlsRow","alignSelf","flex","fullScreenContainer","paddingLeft","playButton","borderColor","borderRadius","borderWidth","height","width","playIcon","resizeMode","progressColumnContainer","progressContainer","marginBottom","progressSlider","replayIcon","thumb","backgroundColor","timeRow","timerLabel","color","fontSize","timerLabelsContainer","toolbar","toolbarRow","track","controlsOverlay","_extends","absoluteFillObject","padding","touchableArea","humanizeVideoDuration","seconds","_ref","begin","end","date","Date","setSeconds","toISOString","substr","Controls","props","isLoading","mainColor","playerState","onReplay","onPause","icon","PAUSED","require","PLAYING","ENDED","getPlayerStateIcon","pressAction","content","React","ActivityIndicator","size","TouchableOpacity","style","styles","onPress","accessibilityLabel","accessibilityHint","Image","source","View","fullScreenImage","Slider","customSliderStyle","duration","onFullScreen","progress","hideSeekbar","containerStyle","Text","RNSlider","marginTop","Platform","OS","onSlidingComplete","value","onSeek","maximumValue","Math","floor","thumbImage","minimumTrackTintColor","maximumTrackTintColor","Boolean","MediaControls","children","_props$containerStyle","_props$fadeOutDelay","fadeOutDelay","_props$isLoading","_props$mainColor","onReplayCallback","onSeeking","_props$showOnStart","showOnStart","_props$showOnLoad","showOnLoad","sliderStyle","_props$hideSeekbar","_props$toolbarStyle","toolbarStyle","opacity","useSharedValue","_useState","useState","isVisible","setIsVisible","fadeOutControls","useCallback","delay","withDelay","withTiming","finished","runOnJS","fadeInControls","loop","toggleControls","useEffect","cancelAnimation","onPaused","animatedStyle","useAnimatedStyle","TouchableWithoutFeedback","Animated","Toolbar"],"mappings":"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"}