{"version":3,"file":"react-native-media-controls.cjs.production.min.js","sources":["../src/constants/playerStates.ts","../src/MediaControls.style.ts","../src/utils.ts","../src/Controls.tsx","../src/Slider.tsx","../src/MediaControls.tsx","../src/Toolbar.tsx"],"sourcesContent":["enum PLAYER_STATES {\n  PLAYING = 0,\n  PAUSED = 1,\n  ENDED = 2,\n}\n\nexport { PLAYER_STATES };\n","import { StyleSheet } from \"react-native\";\n\nconst containerBackgroundColor = \"rgba(45, 59, 62, 0.4)\";\nconst playButtonBorderColor = \"rgba(255,255,255,0.5)\";\nconst white = \"#fff\";\n\nexport default StyleSheet.create({\n  container: {\n    alignItems: \"center\",\n    backgroundColor: containerBackgroundColor,\n    bottom: 0,\n    flex: 1,\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n    left: 0,\n    paddingHorizontal: 20,\n    paddingVertical: 13,\n    position: \"absolute\",\n    right: 0,\n    top: 0,\n  },\n  controlsRow: {\n    alignItems: \"center\",\n    alignSelf: \"stretch\",\n    flex: 1,\n    justifyContent: \"center\",\n  },\n  fullScreenContainer: {\n    alignItems: \"center\",\n    alignSelf: \"stretch\",\n    justifyContent: \"center\",\n    paddingLeft: 20,\n  },\n  playButton: {\n    alignItems: \"center\",\n    borderColor: playButtonBorderColor,\n    borderRadius: 3,\n    borderWidth: 1.5,\n    height: 50,\n    justifyContent: \"center\",\n    width: 50,\n  },\n  playIcon: {\n    height: 22,\n    resizeMode: \"contain\",\n    width: 22,\n  },\n  progressColumnContainer: {\n    flex: 1,\n  },\n  progressContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\",\n    marginBottom: -25,\n  },\n  progressSlider: {\n    alignSelf: \"stretch\",\n  },\n  replayIcon: {\n    height: 20,\n    resizeMode: \"stretch\",\n    width: 25,\n  },\n  thumb: {\n    backgroundColor: white,\n    borderRadius: 50,\n    borderWidth: 3,\n    height: 20,\n    width: 20,\n  },\n  timeRow: {\n    alignSelf: \"stretch\",\n  },\n  timerLabel: {\n    color: white,\n    fontSize: 12,\n  },\n  timerLabelsContainer: {\n    alignSelf: \"stretch\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    marginBottom: -7,\n  },\n  toolbar: {\n    flexDirection: \"row\",\n    flex: 1,\n    justifyContent: \"flex-end\",\n  },\n  toolbarRow: {\n    alignItems: \"flex-start\",\n    flexDirection: \"row\",\n    justifyContent: \"flex-start\",\n  },\n  track: {\n    borderRadius: 1,\n    height: 5,\n  },\n});\n","import { PLAYER_STATES } from \"./constants/playerStates\";\n\nexport const humanizeVideoDuration = (seconds: number) => {\n  const [begin, end] = seconds >= 3600 ? [11, 8] : [14, 5];\n  const date = new Date(0);\n\n  date.setSeconds(seconds);\n  return date.toISOString().substr(begin, end);\n};\n\nexport const noop = () => {};\n\nexport const getPlayerStateIcon = (playerState: PLAYER_STATES) => {\n  switch (playerState) {\n    case PLAYER_STATES.PAUSED:\n      return require(\"./assets/ic_play.png\");\n    case PLAYER_STATES.PLAYING:\n      return require(\"./assets/ic_pause.png\");\n    case PLAYER_STATES.ENDED:\n      return require(\"./assets/ic_replay.png\");\n    default:\n      return null;\n  }\n};\n","import React from \"react\";\nimport { TouchableOpacity, View, ActivityIndicator, Image } from \"react-native\";\nimport styles from \"./MediaControls.style\";\nimport { getPlayerStateIcon } from \"./utils\";\nimport { Props } from \"./MediaControls\";\nimport { PLAYER_STATES } from \"./constants/playerStates\";\n\ntype ControlsProps = Pick<\n  Props,\n  \"isLoading\" | \"mainColor\" | \"playerState\" | \"onReplay\"\n> & {\n  onPause: () => void;\n};\n\nconst Controls = (props: ControlsProps) => {\n  const { isLoading, mainColor, playerState, onReplay, onPause } = props;\n  const icon = getPlayerStateIcon(playerState);\n  const pressAction = playerState === PLAYER_STATES.ENDED ? onReplay : onPause;\n\n  const content = isLoading ? (\n    <ActivityIndicator size=\"large\" color=\"#FFF\" />\n  ) : (\n    <TouchableOpacity\n      style={[styles.playButton, { backgroundColor: mainColor }]}\n      onPress={pressAction}\n      accessibilityLabel={PLAYER_STATES.PAUSED ? \"Tap to Play\" : \"Tap to Pause\"}\n      accessibilityHint={\"Plays and Pauses the Video\"}\n    >\n      <Image source={icon} style={styles.playIcon} />\n    </TouchableOpacity>\n  );\n\n  return <View style={[styles.controlsRow]}>{content}</View>;\n};\n\nexport { Controls };\n","import React from \"react\";\nimport {\n  TouchableOpacity,\n  View,\n  Text,\n  Image,\n  ViewStyle,\n  Platform,\n} from \"react-native\";\nimport styles from \"./MediaControls.style\";\nimport { humanizeVideoDuration } from \"./utils\";\nimport { Props as MediaControlsProps } from \"./MediaControls\";\nimport { PLAYER_STATES } from \"./constants/playerStates\";\nimport RNSlider from \"@react-native-community/slider\";\n\nexport type CustomSliderStyle = {\n  containerStyle: ViewStyle;\n  trackStyle: ViewStyle;\n  thumbStyle: ViewStyle;\n};\n\ntype Props = Pick<\n  MediaControlsProps,\n  | \"progress\"\n  | \"duration\"\n  | \"mainColor\"\n  | \"onFullScreen\"\n  | \"playerState\"\n  | \"onSeek\"\n  | \"onSeeking\"\n> & {\n  onPause: () => void;\n  customSliderStyle?: CustomSliderStyle;\n  hideSeekbar?: boolean;\n};\n\nconst fullScreenImage = require(\"./assets/ic_fullscreen.png\");\n\nconst Slider = (props: Props) => {\n  const {\n    customSliderStyle,\n    duration,\n    mainColor,\n    onFullScreen,\n    onPause,\n    progress,\n    hideSeekbar,\n  } = props;\n\n  const containerStyle = customSliderStyle?.containerStyle || {};\n\n  const dragging = (value: number) => {\n    const { onSeeking, playerState } = props;\n    onSeeking(value);\n\n    if (playerState === PLAYER_STATES.PAUSED) {\n      return;\n    }\n\n    onPause();\n  };\n\n  const seekVideo = (value: number) => {\n    props.onSeek(value);\n    onPause();\n  };\n\n  return (\n    <View\n      style={[styles.controlsRow, styles.progressContainer, containerStyle]}\n    >\n      <View style={styles.progressColumnContainer}>\n        {!hideSeekbar && (\n          <View style={[styles.timerLabelsContainer]}>\n            <Text style={styles.timerLabel}>\n              {humanizeVideoDuration(progress)}\n            </Text>\n            <Text style={styles.timerLabel}>\n              {humanizeVideoDuration(duration)}\n            </Text>\n          </View>\n        )}\n        {!hideSeekbar && (\n          <RNSlider\n            style={[\n              styles.progressSlider,\n              { marginTop: Platform.OS == \"ios\" ? 4 : 10 },\n            ]}\n            onValueChange={dragging}\n            onSlidingComplete={seekVideo}\n            maximumValue={Math.floor(duration)}\n            thumbImage={\n              Platform.OS == \"ios\"\n                ? require(\"./assets/thumb.png\")\n                : require(\"./assets/thumb_android.png\")\n            }\n            value={Math.floor(progress)}\n            minimumTrackTintColor={mainColor}\n            maximumTrackTintColor={\"#AEB3B7\"}\n          />\n        )}\n      </View>\n      {Boolean(onFullScreen) && (\n        <TouchableOpacity\n          style={styles.fullScreenContainer}\n          onPress={onFullScreen}\n        >\n          <Image source={fullScreenImage} />\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n};\n\nexport { Slider };\n","import React, { useState, useEffect } from \"react\";\nimport {\n  View,\n  Animated,\n  TouchableWithoutFeedback,\n  GestureResponderEvent,\n  ViewStyle,\n} from \"react-native\";\nimport styles from \"./MediaControls.style\";\nimport { PLAYER_STATES } from \"./constants/playerStates\";\nimport { Controls } from \"./Controls\";\nimport { Slider, CustomSliderStyle } from \"./Slider\";\nimport { Toolbar } from \"./Toolbar\";\n\nexport type Props = {\n  children: React.ReactNode;\n  containerStyle: ViewStyle;\n  duration: number;\n  fadeOutDelay?: number;\n  isFullScreen: boolean;\n  isLoading: boolean;\n  mainColor: string;\n  onFullScreen?: (event: GestureResponderEvent) => void;\n  onPaused: (playerState: PLAYER_STATES) => void;\n  onReplay: () => void;\n  onSeek: (value: number) => void;\n  onSeeking: (value: number) => void;\n  playerState: PLAYER_STATES;\n  progress: number;\n  showOnStart?: boolean;\n  showOnLoad?: boolean;\n  sliderStyle?: CustomSliderStyle;\n  toolbarStyle?: ViewStyle;\n  hideSeekbar?: boolean;\n};\n\nconst MediaControls = (props: Props) => {\n  const {\n    children,\n    containerStyle: customContainerStyle = {},\n    duration,\n    fadeOutDelay = 5000,\n    isLoading = false,\n    mainColor = \"rgba(12, 83, 175, 0.9)\",\n    onFullScreen,\n    onReplay: onReplayCallback,\n    onSeek,\n    onSeeking,\n    playerState,\n    progress,\n    showOnStart = true,\n    showOnLoad = false,\n    sliderStyle, // defaults are applied in Slider.tsx\n    hideSeekbar = false,\n    toolbarStyle: customToolbarStyle = {},\n  } = props;\n  const { initialOpacity, initialIsVisible } = (() => {\n    if (showOnStart) {\n      return {\n        initialOpacity: 1,\n        initialIsVisible: true,\n      };\n    }\n\n    return {\n      initialOpacity: 0,\n      initialIsVisible: false,\n    };\n  })();\n\n  const [opacity] = useState(new Animated.Value(initialOpacity));\n  const [isVisible, setIsVisible] = useState(initialIsVisible);\n\n  useEffect(() => {\n    fadeOutControls(fadeOutDelay);\n  }, []);\n\n  useEffect(() => {\n    if (showOnLoad) {\n      if (isLoading && !isVisible) toggleControls();\n      if (!isLoading && isVisible) toggleControls();\n    }\n  }, [isLoading, showOnLoad, isVisible]);\n\n  const fadeOutControls = (delay = 0) => {\n    Animated.timing(opacity, {\n      toValue: 0,\n      duration: 300,\n      delay,\n      useNativeDriver: false,\n    }).start(result => {\n      /* I noticed that the callback is called twice, when it is invoked and when it completely finished\n      This prevents some flickering */\n      if (result.finished) {\n        setIsVisible(false);\n      }\n    });\n  };\n\n  const fadeInControls = (loop = true) => {\n    setIsVisible(true);\n    Animated.timing(opacity, {\n      toValue: 1,\n      duration: 300,\n      delay: 0,\n      useNativeDriver: false,\n    }).start(() => {\n      if (loop) {\n        fadeOutControls(fadeOutDelay);\n      }\n    });\n  };\n\n  const onReplay = () => {\n    fadeOutControls(fadeOutDelay);\n    onReplayCallback();\n  };\n\n  const cancelAnimation = () => opacity.stopAnimation(() => setIsVisible(true));\n\n  const onPause = () => {\n    const { playerState, onPaused } = props;\n    const { PLAYING, PAUSED, ENDED } = PLAYER_STATES;\n    switch (playerState) {\n      case PLAYING: {\n        cancelAnimation();\n        break;\n      }\n      case PAUSED: {\n        fadeOutControls(fadeOutDelay);\n        break;\n      }\n      case ENDED:\n        break;\n    }\n\n    const newPlayerState = playerState === PLAYING ? PAUSED : PLAYING;\n    return onPaused(newPlayerState);\n  };\n\n  const toggleControls = () => {\n    // value is the last value of the animation when stop animation was called.\n    // As this is an opacity effect, I (Charlie) used the value (0 or 1) as a boolean\n    opacity.stopAnimation((value: number) => {\n      setIsVisible(!!value);\n      return value ? fadeOutControls() : fadeInControls();\n    });\n  };\n\n  return (\n    <TouchableWithoutFeedback accessible={false} onPress={toggleControls}>\n      <Animated.View\n        style={[styles.container, customContainerStyle, { opacity }]}\n      >\n        {isVisible && (\n          <View style={[styles.container, customContainerStyle]}>\n            <View\n              style={[\n                styles.controlsRow,\n                styles.toolbarRow,\n                customToolbarStyle,\n              ]}\n            >\n              {children}\n            </View>\n            <Controls\n              onPause={onPause}\n              onReplay={onReplay}\n              isLoading={isLoading}\n              mainColor={mainColor}\n              playerState={playerState}\n            />\n            <Slider\n              progress={progress}\n              duration={duration}\n              mainColor={mainColor}\n              onFullScreen={onFullScreen}\n              playerState={playerState}\n              onSeek={onSeek}\n              onSeeking={onSeeking}\n              onPause={onPause}\n              customSliderStyle={sliderStyle}\n              hideSeekbar={hideSeekbar}\n            />\n          </View>\n        )}\n      </Animated.View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nMediaControls.Toolbar = Toolbar;\n\nexport default MediaControls;\n","import React from \"react\";\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst Toolbar = ({ children }: Props) => <>{children}</>;\n\nexport { Toolbar };\n"],"names":["PLAYER_STATES","StyleSheet","create","container","alignItems","backgroundColor","bottom","flex","flexDirection","justifyContent","left","paddingHorizontal","paddingVertical","position","right","top","controlsRow","alignSelf","fullScreenContainer","paddingLeft","playButton","borderColor","borderRadius","borderWidth","height","width","playIcon","resizeMode","progressColumnContainer","progressContainer","marginBottom","progressSlider","replayIcon","thumb","timeRow","timerLabel","color","fontSize","timerLabelsContainer","toolbar","toolbarRow","track","humanizeVideoDuration","seconds","begin","end","date","Date","setSeconds","toISOString","substr","Controls","props","isLoading","mainColor","playerState","onReplay","onPause","icon","PAUSED","require","PLAYING","ENDED","getPlayerStateIcon","pressAction","content","React","ActivityIndicator","size","TouchableOpacity","style","styles","onPress","accessibilityLabel","accessibilityHint","Image","source","View","fullScreenImage","Slider","customSliderStyle","duration","onFullScreen","progress","hideSeekbar","containerStyle","Text","RNSlider","marginTop","Platform","OS","onValueChange","value","onSeeking","onSlidingComplete","onSeek","maximumValue","Math","floor","thumbImage","minimumTrackTintColor","maximumTrackTintColor","Boolean","MediaControls","children","customContainerStyle","fadeOutDelay","onReplayCallback","showOnStart","showOnLoad","sliderStyle","toolbarStyle","customToolbarStyle","initialOpacity","initialIsVisible","opacity","useState","Animated","Value","isVisible","setIsVisible","useEffect","fadeOutControls","toggleControls","delay","timing","toValue","useNativeDriver","start","result","finished","onPaused","stopAnimation","loop","TouchableWithoutFeedback","accessible","Toolbar"],"mappings":"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"}